{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ComponentErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","Robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ComponentErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","fetch","then","response","json","users","filteredRobots","filter","Robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8LAkBeA,EAhBF,SAAC,GACZ,IADaC,EACd,EADcA,KAAKC,EACnB,EADmBA,MAAMC,EACzB,EADyBA,GAEtB,OACA,kBAAC,WAAD,KACI,yBAAKC,UAAY,uDACjB,yBAAKC,IAAI,WACRC,IAAG,+BAA0BH,EAA1B,mBACA,6BACI,4BAAKF,GACL,2BAAIC,OCWLK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,kBAAC,WAAD,KAEQA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACA,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCIlBW,EAhBG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEhB,OACI,kBAAC,WAAD,KACI,yBAAKV,UAAU,OACf,2BAAOA,UAAU,mCAChBW,KAAK,SACNC,YAAY,gBACZC,SAAYH,OCETI,EAVC,SAACC,GACb,OACI,kBAAC,WAAD,KACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UAC7DJ,EAAMK,YCkBTC,E,YArBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,UAAW,GAHD,E,+EAQAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAW,M,+BAK1B,OAAGG,KAAKJ,MAAMC,SACH,+CAEJG,KAAKX,MAAMK,a,GAlBUQ,aCmDrBC,E,YA5CX,aAAe,IAAD,8BACV,+CAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,KAbd,EAAKL,MAAQ,CACTlB,OAAS,GACT4B,YAAc,IAJR,E,iFAQQ,IAAD,OACjBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC9BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACvB,OAASiC,S,+BAQjC,IAAD,EAEyBX,KAAKJ,MAA5BlB,EAFF,EAEEA,OAAQ4B,EAFV,EAEUA,YAETM,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASV,EAAYS,kBAEzD,OAAQrC,EAAOuC,OAEX,kBAAC,WAAD,KACI,yBAAK3C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQkC,QARd,2C,GA5BdV,aCKEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD4HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.8d3f65d2.chunk.js","sourcesContent":["import React, {Fragment} from \"react\";\r\n\r\nconst Card = ({name,email,id}) =>\r\n {\r\n    return (\r\n    <Fragment>\r\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt='alt-robo'\r\n         src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    </Fragment>    \r\n    );\r\n}\r\n\r\nexport default Card;","import React, {Fragment} from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({Robots}) => {\r\n    \r\n    return(\r\n        <Fragment>\r\n            {\r\n                Robots.map((user,i)=>{\r\n                return(\r\n                <Card \r\n                key={i} \r\n                id={Robots[i].id} \r\n                name={Robots[i].name} \r\n                email={Robots[i].email}/>\r\n       );\r\n    })\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React, {Fragment} from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\r\n    return(\r\n        <Fragment>\r\n            <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n             type='search' \r\n            placeholder='search_robots'\r\n            onChange = {searchChange}    \r\n            />\r\n            </div>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default SearchBox;","import React, { Fragment } from 'react';\r\n\r\nconst Scroll  = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <div style={{overflowY :'scroll', border:'5px solid black', height:'800px'}}>\r\n                 {props.children}\r\n            </div>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, {Component, Fragment} from 'react';\r\n\r\nclass ComponentErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError : true})\r\n\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops GEGE.....</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ComponentErrorBoundry;","import React, {Fragment, Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ComponentErrorBoundry from '../components/ComponentErrorBoundry';\r\nimport '../index.css';\r\n\r\nclass App extends Component  {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            Robots : [],\r\n            searchField : '',\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n        .then(users => this.setState({Robots : users}));\r\n    }\r\n\r\n    onSearchChange = (event) =>  {\r\n        this.setState({})\r\n        // console.log(filteredRobots); \r\n    }\r\n\r\n    render() {\r\n\r\n        const {Robots, searchField} = this.state;\r\n\r\n        const filteredRobots = Robots.filter(Robot =>{\r\n            return Robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return !Robots.length ? <h1>Loading</h1>\r\n        :(\r\n            <Fragment>\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ComponentErrorBoundry>\r\n                            <CardList Robots={filteredRobots}/>\r\n                        </ComponentErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            </Fragment>\r\n            );\r\n    }\r\n   \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}